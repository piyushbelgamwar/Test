import com.launchdarkly.sdk.LDContext
import com.launchdarkly.sdk.server.{LDClient, LDClientInterface}
import java.text.SimpleDateFormat
import java.util.{Date, Locale}

object LaunchDarklyDateToggleWithDebug {

  private val SDK_KEY  = "YOUR_SDK_KEY"      // replace with your SDK key
  private val DATE_FLAG_KEY = "toggle-date-flag"

  def main(args: Array[String]): Unit = {
    val ldClient: LDClientInterface = new LDClient(SDK_KEY)
    try {
      // build an anonymous context
      val context = LDContext.builder("anonymous")
        .anonymous(true)
        .build()

      // 1) fetch the raw date string
      val rawValue: String = ldClient.stringVariation(DATE_FLAG_KEY, context, null)
      println(s"▶ Raw '$DATE_FLAG_KEY' value: $rawValue")

      // 2) parse the date (if present)
      val (targetDateOpt, parseErrorOpt) = Option(rawValue).filterNot(_.equalsIgnoreCase("null")) match {
        case Some(s) =>
          try {
            val fmt = new SimpleDateFormat("dd-MM-yyyy", Locale.getDefault)
            fmt.setLenient(false)
            (Some(fmt.parse(s)), None)
          } catch {
            case e: Exception =>
              (None, Some(e))
          }
        case None =>
          (None, None)
      }

      targetDateOpt.foreach(d => println(s"▶ Parsed target date: $d"))
      parseErrorOpt.foreach(e => println(s"⚠️ Date parse error: ${e.getMessage}"))

      // 3) compare to now
      val now = new Date()
      println(s"▶ Current date/time:  $now")

      val isActive = targetDateOpt match {
        case Some(target) => !now.before(target)
        case None         => false
      }
      println(s"▶ Is feature active? $isActive")

      // 4) dump **all** flags for this context
      val flagsState = ldClient.allFlagsState(context)
      println("\n===== ALL FLAGS STATE =====")
      println(flagsState.toJson)  

    } finally {
      ldClient.close()
    }
  }
}